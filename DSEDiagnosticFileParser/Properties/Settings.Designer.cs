//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSEDiagnosticFileParser.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.8.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[{\"item1\":\".zip\",\"item2\":\"zip\"},{\"item1\":\".tar\",\"item2\":\"tar\"},{\"item1\":\".gz\",\"it" +
            "em2\":\"gz\"},{\"item1\":\".msgz\",\"item2\":\"msgz\"}]")]
        public string ExtractFilesWithExtensions {
            get {
                return ((string)(this["ExtractFilesWithExtensions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@".\ProcessFileMappings.json,.\Json\ProcessFileMappings.json,[cpld]\Json\ProcessFileMappings.json,[cpld]\ProcessFileMappings.json,[ApplicationRunTimeDirectory]\Json\ProcessFileMappings.json,[ApplicationRunTimeDirectory]\ProcessFileMappings.json,.\Json\ProcessFileMappings.json,.\ProcessFileMappings.json")]
        public string ProcessFileMappings {
            get {
                return ((string)(this["ProcessFileMappings"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@".\DiagnosticFileRegExAssocations.json,.\Json\DiagnosticFileRegExAssocations.json,[cpld]\Json\DiagnosticFileRegExAssocations.json,[cpld]\DiagnosticFileRegExAssocations.json,[ApplicationRunTimeDirectory]\Json\DiagnosticFileRegExAssocations.json,[ApplicationRunTimeDirectory]\DiagnosticFileRegExAssocations.json,.\DiagnosticFileRegExAssocations.json,.\Json\DiagnosticFileRegExAssocations.json")]
        public string DiagnosticFileRegExAssocations {
            get {
                return ((string)(this["DiagnosticFileRegExAssocations"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>password</string>\r\n  <string>monitored_cassandra_pass</string>\r\n</ArrayOfS" +
            "tring>")]
        public global::System.Collections.Specialized.StringCollection ObscureFiledValues {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["ObscureFiledValues"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"[
{""Item1"":""_Comments_"",""Item2"":""Item1 is case sensitive. Item2 Canbe a list of file names delimited by comma. Begginning files will be selected only if no later files in the list exist""},
{""Item1"":""SimpleSnitch"",""Item2"":null},
{""Item1"":""RackInferringSnitch"",""Item2"":null},
{""Item1"":""PropertyFileSnitch"",""Item2"":""cassandra-topology.properties""},
{""Item1"":""GossipingPropertyFileSnitch"",""Item2"":""cassandra-topology.properties,cassandra-rackdc.properties""},
{""Item1"":""CloudstackSnitch"",""Item2"":null},
{""Item1"":""GoogleClouldSnitch"",""Item2"":""cassandra-rackdc.properties""},
{""Item1"":""EC2Snitch"",""Item2"":""cassandra-rackdc.properties""},
{""Item1"":""EC2MultiRegionSnitch"",""Item2"":""cassandra-rackdc.properties""},
{""Item1"":""YamlFileNetworkTopologySnitch"",""Item2"":""cassandra-topology.yaml""}
]")]
        public string SnitchFileMappings {
            get {
                return ((string)(this["SnitchFileMappings"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("%-5level [%thread] %date{ISO8601} %F:%L - %msg%n")]
        public string Log4NetConversionPattern {
            get {
                return ((string)(this["Log4NetConversionPattern"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\Log4NetParser.json,.\\Json\\Log4NetParser.json,[cpld]\\Json\\Log4NetParser.json,[cp" +
            "ld]\\Log4NetParser.json,[ApplicationRunTimeDirectory]\\Json\\Log4NetParser.json,[Ap" +
            "plicationRunTimeDirectory]\\Log4NetParser.json,.\\Log4NetParser.json,.\\Json\\Log4Ne" +
            "tParser.json")]
        public string Log4NetParser {
            get {
                return ((string)(this["Log4NetParser"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>mscorlib.dll</string>
  <string>Microsoft.CSharp.dll</string>
  <string>System.dll</string>
  <string>System.Core.dll</string>
  <string>System.Xml.dll</string>
  <string>System.Xml.Linq.dll</string>
  <string>--[Search([AssemblyDir];[WorkingDir];[AppRunTimeDir],DSEDiagnosticLibrary.dll)]</string>
  <string>--[Search([AssemblyDir];[WorkingDir];[AppRunTimeDir],DSEDiagnosticLog4NetParser.dll)]</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection CodeDomAssemblies {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["CodeDomAssemblies"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"using System;
using System.Collections.Generic;
using System.Text;
using DSEDiagnosticFileParser;
using DSEDiagnosticLibrary;
using DSEDiagnosticLog4NetParser;

public static class {0}
{{
    public static {1} {2} ( {3} )
    {{
        {4}
    }}
}}")]
        public string CodeDomClassTemplate {
            get {
                return ((string)(this["CodeDomClassTemplate"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@".\file-create-folder-structure-Mappings.json,.\Json\file-create-folder-structure-Mappings.json,[cpld]\Json\file-create-folder-structure-Mappings.json,[cpld]\file-create-folder-structure-Mappings.json,[ApplicationRunTimeDirectory]\Json\file-create-folder-structure-Mappings.json,[ApplicationRunTimeDirectory]\file-create-folder-structure-Mappings.json,.\file-create-folder-structure-Mappings.json,.\Json\file-create-folder-structure-Mappings.json")]
        public string FileCreateFolderTargetSourceMappings {
            get {
                return ((string)(this["FileCreateFolderTargetSourceMappings"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("OpsCenterStruct")]
        public string FileCreateFolderDefaultDirName {
            get {
                return ((string)(this["FileCreateFolderDefaultDirName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{0}-diagnostics-{1:yyyy_MM_dd_HH_mm_ss}_UTC")]
        public string FileCreateFolderDefaultDirFormatString {
            get {
                return ((string)(this["FileCreateFolderDefaultDirFormatString"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CREATE KEYSPACE dse_security WITH replication = {\'class\': \'EverywhereStrategy\'}  " +
            "AND durable_writes = true AND PreLoaded = true;\r\n\r\nCREATE TABLE dse_security.rol" +
            "e_options (\r\n    role text PRIMARY KEY,\r\n    options map<text, text>\r\n) WITH blo" +
            "om_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'ALL\', \'rows_per_partitio" +
            "n\': \'NONE\'}\r\n    AND comment = \'role options\'\r\n    AND compaction = {\'class\': \'o" +
            "rg.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\'" +
            ": \'32\', \'min_threshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\'" +
            ", \'class\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_" +
            "chance = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_" +
            "live = 0\r\n    AND gc_grace_seconds = 7776000\r\n    AND max_index_interval = 2048\r" +
            "\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128" +
            "\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r" +
            "\n\r\nCREATE TABLE dse_security.digest_tokens (\r\n    id blob PRIMARY KEY,\r\n    pass" +
            "word blob\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'ALL" +
            "\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'digest_tokens\'\r\n    AND com" +
            "paction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStra" +
            "tegy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND compression = {\'chu" +
            "nk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compress.LZ4Compressor" +
            "\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n  " +
            "  AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 7776000\r\n    AND max_" +
            "index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND mi" +
            "n_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_re" +
            "try = \'99PERCENTILE\';\r\n\r\nCREATE TABLE dse_security.spark_security (\r\n    dc text" +
            " PRIMARY KEY,\r\n    shared_secret text\r\n) WITH bloom_filter_fp_chance = 0.01\r\n   " +
            " AND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = " +
            "\'Spark security settings\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra." +
            "db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_thresho" +
            "ld\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apac" +
            "he.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AN" +
            "D dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc" +
            "_grace_seconds = 7776000\r\n    AND max_index_interval = 2048\r\n    AND memtable_fl" +
            "ush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repai" +
            "r_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE dse_" +
            "security.tokens (\r\n    key blob,\r\n    column1 text,\r\n    value blob,\r\n    PRIMAR" +
            "Y KEY (key, column1)\r\n) WITH COMPACT STORAGE\r\n    AND CLUSTERING ORDER BY (colum" +
            "n1 ASC)\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AN" +
            "D comment = \'Stores delegate tokens meta data\'\r\n    AND compaction = {\'class\': \'" +
            "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'}\r\n    AND compr" +
            "ession = {\'sstable_compression\': \'org.apache.cassandra.io.compress.LZ4Compressor" +
            "\'}\r\n    AND dclocal_read_repair_chance = 0.1\r\n    AND default_time_to_live = 0\r\n" +
            "    AND gc_grace_seconds = 60\r\n    AND max_index_interval = 2048\r\n    AND memtab" +
            "le_flush_period_in_ms = 0\r\n    AND min_index_interval = 128\r\n    AND read_repair" +
            "_chance = 0.0\r\n    AND speculative_retry = \'NONE\';\r\n\r\nCREATE KEYSPACE system_sch" +
            "ema WITH replication = {\'class\': \'LocalStrategy\'}  AND durable_writes = true AND" +
            " PreLoaded = true;\r\n\r\nCREATE TABLE system_schema.tables (\r\n    keyspace_name tex" +
            "t,\r\n    table_name text,\r\n    bloom_filter_fp_chance double,\r\n    caching frozen" +
            "<map<text, text>>,\r\n    comment text,\r\n    compaction frozen<map<text, text>>,\r\n" +
            "    compression frozen<map<text, text>>,\r\n    crc_check_chance double,\r\n    dclo" +
            "cal_read_repair_chance double,\r\n    default_time_to_live int,\r\n    extensions fr" +
            "ozen<map<text, blob>>,\r\n    flags frozen<set<text>>,\r\n    gc_grace_seconds int,\r" +
            "\n    id uuid,\r\n    max_index_interval int,\r\n    memtable_flush_period_in_ms int," +
            "\r\n    min_index_interval int,\r\n    read_repair_chance double,\r\n    speculative_r" +
            "etry text,\r\n    PRIMARY KEY (keyspace_name, table_name)\r\n) WITH CLUSTERING ORDER" +
            " BY (table_name ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {" +
            "\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'table definitio" +
            "ns\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTier" +
            "edCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND com" +
            "pression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compre" +
            "ss.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_" +
            "chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 60480" +
            "0\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600" +
            "000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND" +
            " speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_schema.functions (\r\n" +
            "    keyspace_name text,\r\n    function_name text,\r\n    argument_types frozen<list" +
            "<text>>,\r\n    argument_names frozen<list<text>>,\r\n    body text,\r\n    called_on_" +
            "null_input boolean,\r\n    language text,\r\n    return_type text,\r\n    PRIMARY KEY " +
            "(keyspace_name, function_name, argument_types)\r\n) WITH CLUSTERING ORDER BY (func" +
            "tion_name ASC, argument_types ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    A" +
            "ND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'u" +
            "ser defined function definitions\'\r\n    AND compaction = {\'class\': \'org.apache.ca" +
            "ssandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min" +
            "_threshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'" +
            "org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0" +
            "\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n  " +
            "  AND gc_grace_seconds = 604800\r\n    AND max_index_interval = 2048\r\n    AND memt" +
            "able_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND rea" +
            "d_repair_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TAB" +
            "LE system_schema.triggers (\r\n    keyspace_name text,\r\n    table_name text,\r\n    " +
            "trigger_name text,\r\n    options frozen<map<text, text>>,\r\n    PRIMARY KEY (keysp" +
            "ace_name, table_name, trigger_name)\r\n) WITH CLUSTERING ORDER BY (table_name ASC," +
            " trigger_name ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'k" +
            "eys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'trigger definitio" +
            "ns\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTier" +
            "edCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND com" +
            "pression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compre" +
            "ss.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_" +
            "chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 60480" +
            "0\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600" +
            "000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND" +
            " speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_schema.aggregates (\r" +
            "\n    keyspace_name text,\r\n    aggregate_name text,\r\n    argument_types frozen<li" +
            "st<text>>,\r\n    final_func text,\r\n    initcond text,\r\n    return_type text,\r\n   " +
            " state_func text,\r\n    state_type text,\r\n    PRIMARY KEY (keyspace_name, aggrega" +
            "te_name, argument_types)\r\n) WITH CLUSTERING ORDER BY (aggregate_name ASC, argume" +
            "nt_types ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\':" +
            " \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'user defined aggregate" +
            " definitions\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compactio" +
            "n.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n " +
            "   AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra" +
            ".io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_re" +
            "ad_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_secon" +
            "ds = 604800\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in" +
            "_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0." +
            "0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_schema.vie" +
            "ws (\r\n    keyspace_name text,\r\n    view_name text,\r\n    base_table_id uuid,\r\n   " +
            " base_table_name text,\r\n    bloom_filter_fp_chance double,\r\n    caching frozen<m" +
            "ap<text, text>>,\r\n    comment text,\r\n    compaction frozen<map<text, text>>,\r\n  " +
            "  compression frozen<map<text, text>>,\r\n    crc_check_chance double,\r\n    dcloca" +
            "l_read_repair_chance double,\r\n    default_time_to_live int,\r\n    extensions froz" +
            "en<map<text, blob>>,\r\n    gc_grace_seconds int,\r\n    id uuid,\r\n    include_all_c" +
            "olumns boolean,\r\n    max_index_interval int,\r\n    memtable_flush_period_in_ms in" +
            "t,\r\n    min_index_interval int,\r\n    read_repair_chance double,\r\n    speculative" +
            "_retry text,\r\n    where_clause text,\r\n    PRIMARY KEY (keyspace_name, view_name)" +
            "\r\n) WITH CLUSTERING ORDER BY (view_name ASC)\r\n    AND bloom_filter_fp_chance = 0" +
            ".01\r\n    AND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND co" +
            "mment = \'view definitions\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra" +
            ".db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_thresh" +
            "old\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apa" +
            "che.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    A" +
            "ND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND g" +
            "c_grace_seconds = 604800\r\n    AND max_index_interval = 2048\r\n    AND memtable_fl" +
            "ush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repai" +
            "r_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE syst" +
            "em_schema.indexes (\r\n    keyspace_name text,\r\n    table_name text,\r\n    index_na" +
            "me text,\r\n    kind text,\r\n    options frozen<map<text, text>>,\r\n    PRIMARY KEY " +
            "(keyspace_name, table_name, index_name)\r\n) WITH CLUSTERING ORDER BY (table_name " +
            "ASC, index_name ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {" +
            "\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'secondary index" +
            " definitions\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compactio" +
            "n.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n " +
            "   AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra" +
            ".io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_re" +
            "ad_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_secon" +
            "ds = 604800\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in" +
            "_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0." +
            "0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_schema.key" +
            "spaces (\r\n    keyspace_name text PRIMARY KEY,\r\n    durable_writes boolean,\r\n    " +
            "replication frozen<map<text, text>>\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    A" +
            "ND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'k" +
            "eyspace definitions\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.co" +
            "mpaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': " +
            "\'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.ca" +
            "ssandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dcl" +
            "ocal_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grac" +
            "e_seconds = 604800\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_pe" +
            "riod_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chan" +
            "ce = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_sch" +
            "ema.types (\r\n    keyspace_name text,\r\n    type_name text,\r\n    field_names froze" +
            "n<list<text>>,\r\n    field_types frozen<list<text>>,\r\n    PRIMARY KEY (keyspace_n" +
            "ame, type_name)\r\n) WITH CLUSTERING ORDER BY (type_name ASC)\r\n    AND bloom_filte" +
            "r_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NON" +
            "E\'}\r\n    AND comment = \'user defined type definitions\'\r\n    AND compaction = {\'c" +
            "lass\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_t" +
            "hreshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_" +
            "kb\': \'64\', \'class\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND c" +
            "rc_check_chance = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default" +
            "_time_to_live = 0\r\n    AND gc_grace_seconds = 604800\r\n    AND max_index_interval" +
            " = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interv" +
            "al = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99PERCE" +
            "NTILE\';\r\n\r\nCREATE TABLE system_schema.dropped_columns (\r\n    keyspace_name text," +
            "\r\n    table_name text,\r\n    column_name text,\r\n    dropped_time timestamp,\r\n    " +
            "type text,\r\n    PRIMARY KEY (keyspace_name, table_name, column_name)\r\n) WITH CLU" +
            "STERING ORDER BY (table_name ASC, column_name ASC)\r\n    AND bloom_filter_fp_chan" +
            "ce = 0.01\r\n    AND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    " +
            "AND comment = \'dropped column registry\'\r\n    AND compaction = {\'class\': \'org.apa" +
            "che.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\'" +
            ", \'min_threshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'cla" +
            "ss\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance" +
            " = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live =" +
            " 0\r\n    AND gc_grace_seconds = 604800\r\n    AND max_index_interval = 2048\r\n    AN" +
            "D memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    A" +
            "ND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREA" +
            "TE TABLE system_schema.columns (\r\n    keyspace_name text,\r\n    table_name text,\r" +
            "\n    column_name text,\r\n    clustering_order text,\r\n    column_name_bytes blob,\r" +
            "\n    kind text,\r\n    position int,\r\n    type text,\r\n    PRIMARY KEY (keyspace_na" +
            "me, table_name, column_name)\r\n) WITH CLUSTERING ORDER BY (table_name ASC, column" +
            "_name ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'A" +
            "LL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'column definitions\'\r\n    " +
            "AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompact" +
            "ionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND compression " +
            "= {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compress.LZ4Com" +
            "pressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_chance = " +
            "0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 604800\r\n    AN" +
            "D max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    " +
            "AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculat" +
            "ive_retry = \'99PERCENTILE\';\r\n\r\nCREATE KEYSPACE system_auth WITH replication = {\'" +
            "class\': \'EverywhereStrategy\'} AND durable_writes = true AND PreLoaded = true;\r\n\r" +
            "\nCREATE TABLE system_auth.resource_role_permissons_index (\r\n    resource text,\r\n" +
            "    role text,\r\n    PRIMARY KEY (resource, role)\r\n) WITH CLUSTERING ORDER BY (ro" +
            "le ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'ALL\'" +
            ", \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'index of db roles with permi" +
            "ssions granted on a resource\'\r\n    AND compaction = {\'class\': \'org.apache.cassan" +
            "dra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_thr" +
            "eshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org." +
            "apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n  " +
            "  AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AN" +
            "D gc_grace_seconds = 7776000\r\n    AND max_index_interval = 2048\r\n    AND memtabl" +
            "e_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_r" +
            "epair_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE " +
            "system_auth.role_permissions (\r\n    role text,\r\n    resource text,\r\n    permissi" +
            "ons set<text>,\r\n    PRIMARY KEY (role, resource)\r\n) WITH CLUSTERING ORDER BY (re" +
            "source ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'" +
            "ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'permissions granted to d" +
            "b roles\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.Siz" +
            "eTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AN" +
            "D compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.c" +
            "ompress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_re" +
            "pair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = " +
            "7776000\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms " +
            "= 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n " +
            "   AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_auth.role_memb" +
            "ers (\r\n    role text,\r\n    member text,\r\n    PRIMARY KEY (role, member)\r\n) WITH " +
            "CLUSTERING ORDER BY (member ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND" +
            " caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'rol" +
            "e memberships lookup table\'\r\n    AND compaction = {\'class\': \'org.apache.cassandr" +
            "a.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_thres" +
            "hold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.ap" +
            "ache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    " +
            "AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND " +
            "gc_grace_seconds = 7776000\r\n    AND max_index_interval = 2048\r\n    AND memtable_" +
            "flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_rep" +
            "air_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE sy" +
            "stem_auth.roles (\r\n    role text PRIMARY KEY,\r\n    can_login boolean,\r\n    is_su" +
            "peruser boolean,\r\n    member_of set<text>,\r\n    salted_hash text\r\n) WITH bloom_f" +
            "ilter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'ALL\', \'rows_per_partition\': " +
            "\'NONE\'}\r\n    AND comment = \'role definitions\'\r\n    AND compaction = {\'class\': \'o" +
            "rg.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\'" +
            ": \'32\', \'min_threshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\'" +
            ", \'class\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_" +
            "chance = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_" +
            "live = 0\r\n    AND gc_grace_seconds = 7776000\r\n    AND max_index_interval = 2048\r" +
            "\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128" +
            "\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r" +
            "\n    \r\nCREATE TABLE system_auth.credentials (\r\n  username text,\r\n  options map<t" +
            "ext, text>,\r\n  salted_hash text,\r\n  PRIMARY KEY ((username))\r\n) WITH\r\n  bloom_fi" +
            "lter_fp_chance=0.010000 AND\r\n  caching=\'KEYS_ONLY\' AND\r\n  comment=\'\' AND\r\n  dclo" +
            "cal_read_repair_chance=0.100000 AND\r\n  gc_grace_seconds=7776000 AND\r\n  index_int" +
            "erval=128 AND\r\n  read_repair_chance=0.000000 AND\r\n  replicate_on_write=\'true\' AN" +
            "D\r\n  populate_io_cache_on_flush=\'false\' AND\r\n  default_time_to_live=0 AND\r\n  spe" +
            "culative_retry=\'99.0PERCENTILE\' AND\r\n  memtable_flush_period_in_ms=0 AND\r\n  comp" +
            "action={\'class\': \'SizeTieredCompactionStrategy\'} AND\r\n  compression={\'sstable_co" +
            "mpression\': \'LZ4Compressor\'};\r\n\r\nCREATE TABLE system_auth.permissions (\r\n  usern" +
            "ame text,\r\n  resource text,\r\n  permissions set<text>,\r\n  PRIMARY KEY ((username)" +
            ", resource)\r\n) WITH\r\n  bloom_filter_fp_chance=0.010000 AND\r\n  caching=\'KEYS_ONLY" +
            "\' AND\r\n  comment=\'\' AND\r\n  dclocal_read_repair_chance=0.100000 AND\r\n  gc_grace_s" +
            "econds=7776000 AND\r\n  index_interval=128 AND\r\n  read_repair_chance=0.000000 AND\r" +
            "\n  replicate_on_write=\'true\' AND\r\n  populate_io_cache_on_flush=\'false\' AND\r\n  de" +
            "fault_time_to_live=0 AND\r\n  speculative_retry=\'99.0PERCENTILE\' AND\r\n  memtable_f" +
            "lush_period_in_ms=0 AND\r\n  compaction={\'class\': \'SizeTieredCompactionStrategy\'} " +
            "AND\r\n  compression={\'sstable_compression\': \'LZ4Compressor\'};\r\n\r\nCREATE TABLE sys" +
            "tem_auth.users (\r\n  name text,\r\n  super boolean,\r\n  PRIMARY KEY ((name))\r\n) WITH" +
            "\r\n  bloom_filter_fp_chance=0.010000 AND\r\n  caching=\'KEYS_ONLY\' AND\r\n  comment=\'\'" +
            " AND\r\n  dclocal_read_repair_chance=0.100000 AND\r\n  gc_grace_seconds=7776000 AND\r" +
            "\n  index_interval=128 AND\r\n  read_repair_chance=0.000000 AND\r\n  replicate_on_wri" +
            "te=\'true\' AND\r\n  populate_io_cache_on_flush=\'false\' AND\r\n  default_time_to_live=" +
            "0 AND\r\n  speculative_retry=\'99.0PERCENTILE\' AND\r\n  memtable_flush_period_in_ms=0" +
            " AND\r\n  compaction={\'class\': \'SizeTieredCompactionStrategy\'} AND\r\n  compression=" +
            "{\'sstable_compression\': \'LZ4Compressor\'};\r\n\r\nCREATE KEYSPACE system WITH replica" +
            "tion = {\'class\': \'LocalStrategy\'}  AND durable_writes = true AND PreLoaded = tru" +
            "e;\r\n\r\nCREATE TABLE system.peers (\r\n    peer inet PRIMARY KEY,\r\n    data_center t" +
            "ext,\r\n    host_id uuid,\r\n    preferred_ip inet,\r\n    rack text,\r\n    release_ver" +
            "sion text,\r\n    rpc_address inet,\r\n    schema_version uuid,\r\n    tokens set<text" +
            ">,\r\n    workload text\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching = \'" +
            "{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'known peers in " +
            "the cluster\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction" +
            ".SizeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'" +
            "org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_ch" +
            "ance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    " +
            "AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n  " +
            "  AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND specul" +
            "ative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.range_xfers (\r\n    token_" +
            "bytes blob PRIMARY KEY,\r\n    requested_at timestamp\r\n) WITH bloom_filter_fp_chan" +
            "ce = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    " +
            "AND comment = \'ranges requested for transfer here\'\r\n    AND compaction = {\'class" +
            "\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'}\r\n    AND c" +
            "ompression = {\'sstable_compression\': \'org.apache.cassandra.io.compress.LZ4Compre" +
            "ssor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live =" +
            " 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_interval = 2048\r\n    AND mem" +
            "table_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND re" +
            "ad_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE " +
            "TABLE system.schema_keyspaces (\r\n    keyspace_name text PRIMARY KEY,\r\n    durabl" +
            "e_writes boolean,\r\n    strategy_class text,\r\n    strategy_options text\r\n) WITH C" +
            "OMPACT STORAGE\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys" +
            "\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'keyspace definitions\'" +
            "\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredC" +
            "ompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.apache.c" +
            "assandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n" +
            "    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 604800\r\n    AND max" +
            "_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND m" +
            "in_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_r" +
            "etry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.schema_columns (\r\n    keyspace_n" +
            "ame text,\r\n    columnfamily_name text,\r\n    column_name text,\r\n    component_ind" +
            "ex int,\r\n    index_name text,\r\n    index_options text,\r\n    index_type text,\r\n  " +
            "  type text,\r\n    validator text,\r\n    PRIMARY KEY (keyspace_name, columnfamily_" +
            "name, column_name)\r\n) WITH CLUSTERING ORDER BY (columnfamily_name ASC, column_na" +
            "me ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\"" +
            ", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'ColumnFamily column attribut" +
            "es\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTier" +
            "edCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.apach" +
            "e.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0." +
            "0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 604800\r\n    AND " +
            "max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AN" +
            "D min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculativ" +
            "e_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.\"IndexInfo\" (\r\n    table_name" +
            " text,\r\n    index_name text,\r\n    \"\" blob,\r\n    PRIMARY KEY (table_name, index_n" +
            "ame)\r\n) WITH COMPACT STORAGE\r\n    AND CLUSTERING ORDER BY (index_name ASC)\r\n    " +
            "AND bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_p" +
            "artition\":\"NONE\"}\'\r\n    AND comment = \'indexes that have been completed\'\r\n    AN" +
            "D compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactio" +
            "nStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.apache.cassandra" +
            ".io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND " +
            "default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_interv" +
            "al = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_inte" +
            "rval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0P" +
            "ERCENTILE\';\r\n\r\nCREATE TABLE system.schema_triggers (\r\n    keyspace_name text,\r\n " +
            "   columnfamily_name text,\r\n    trigger_name text,\r\n    trigger_options map<text" +
            ", text>,\r\n    PRIMARY KEY (keyspace_name, columnfamily_name, trigger_name)\r\n) WI" +
            "TH CLUSTERING ORDER BY (columnfamily_name ASC, trigger_name ASC)\r\n    AND bloom_" +
            "filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":" +
            "\"NONE\"}\'\r\n    AND comment = \'triggers metadata table\'\r\n    AND compaction = {\'cl" +
            "ass\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'}\r\n    AN" +
            "D compression = {\'sstable_compression\': \'org.apache.cassandra.io.compress.LZ4Com" +
            "pressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_liv" +
            "e = 0\r\n    AND gc_grace_seconds = 604800\r\n    AND max_index_interval = 2048\r\n   " +
            " AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n  " +
            "  AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0PERCENTILE\';\r\n\r" +
            "\nCREATE TABLE system.sstable_activity (\r\n    keyspace_name text,\r\n    columnfami" +
            "ly_name text,\r\n    generation int,\r\n    rate_120m double,\r\n    rate_15m double,\r" +
            "\n    PRIMARY KEY ((keyspace_name, columnfamily_name, generation))\r\n) WITH bloom_" +
            "filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":" +
            "\"NONE\"}\'\r\n    AND comment = \'historic sstable read rates\'\r\n    AND compaction = " +
            "{\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'}\r\n  " +
            "  AND compression = {\'sstable_compression\': \'org.apache.cassandra.io.compress.LZ" +
            "4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to" +
            "_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_interval = 2048\r\n    " +
            "AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n   " +
            " AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0PERCENTILE\';\r\n\r\n" +
            "CREATE TABLE system.peer_events (\r\n    peer inet PRIMARY KEY,\r\n    hints_dropped" +
            " map<uuid, int>\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys" +
            "\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'cf contains events re" +
            "lated to peers\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compact" +
            "ion.SizeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\'" +
            ": \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair" +
            "_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n " +
            "   AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r" +
            "\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND spe" +
            "culative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.schema_usertypes (\r\n  " +
            "  keyspace_name text,\r\n    type_name text,\r\n    field_names list<text>,\r\n    fie" +
            "ld_types list<text>,\r\n    PRIMARY KEY (keyspace_name, type_name)\r\n) WITH CLUSTER" +
            "ING ORDER BY (type_name ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND cac" +
            "hing = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'Defined" +
            " user types\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction" +
            ".SizeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'" +
            "org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_ch" +
            "ance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 604800\r" +
            "\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 360000" +
            "0\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND s" +
            "peculative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.paxos (\r\n    row_key" +
            " blob,\r\n    cf_id uuid,\r\n    in_progress_ballot timeuuid,\r\n    most_recent_commi" +
            "t blob,\r\n    most_recent_commit_at timeuuid,\r\n    proposal blob,\r\n    proposal_b" +
            "allot timeuuid,\r\n    PRIMARY KEY (row_key, cf_id)\r\n) WITH CLUSTERING ORDER BY (c" +
            "f_id ASC)\r\n    AND bloom_filter_fp_chance = 0.1\r\n    AND caching = \'{\"keys\":\"ALL" +
            "\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'in-progress paxos proposals" +
            "\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.LeveledCom" +
            "pactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.apache.cas" +
            "sandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n  " +
            "  AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_" +
            "interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_inde" +
            "x_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = " +
            "\'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.batchlog (\r\n    id uuid PRIMARY KEY,\r\n " +
            "   data blob,\r\n    version int,\r\n    written_at timestamp\r\n) WITH bloom_filter_f" +
            "p_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'" +
            "\r\n    AND comment = \'uncommited batches\'\r\n    AND compaction = {\'min_threshold\':" +
            " \'2\', \'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'" +
            "}\r\n    AND compression = {\'sstable_compression\': \'org.apache.cassandra.io.compre" +
            "ss.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_ti" +
            "me_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_interval = 2048\r" +
            "\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128" +
            "\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0PERCENTILE\'" +
            ";\r\n    \r\nCREATE TABLE system.batches (\r\n    id uuid PRIMARY KEY,\r\n    mutations " +
            "blob,\r\n    version int\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching = " +
            "\'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'log batches\'\r\n" +
            "    AND compaction = {\'min_threshold\': \'2\', \'class\': \'org.apache.cassandra.db.co" +
            "mpaction.SizeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compres" +
            "sion\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_r" +
            "epair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds =" +
            " 0\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 360" +
            "0000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AN" +
            "D speculative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.prepared_statemen" +
            "ts (\r\n   keyspace_name text,\r\n   table_name text,\r\n   prepared_id blob,\r\n   quer" +
            "y_string text,\r\n   PRIMARY KEY (keyspace_name, table_name, prepared_id)\r\n   ) WI" +
            "TH bloom_filter_fp_chance = 0.01\r\n\tAND caching = \'{\"keys\":\"ALL\", \"rows_per_parti" +
            "tion\":\"NONE\"}\'\r\n\tAND comment = \'prepared statements\'\r\n\tAND compaction = {\'min_th" +
            "reshold\': \'2\', \'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompaction" +
            "Strategy\'}\r\n\tAND compression = {\'sstable_compression\': \'org.apache.cassandra.io." +
            "compress.LZ4Compressor\'}\r\n\tAND dclocal_read_repair_chance = 0.0\r\n\tAND default_ti" +
            "me_to_live = 0\r\n\tAND gc_grace_seconds = 0\r\n\tAND max_index_interval = 2048\r\n\tAND " +
            "memtable_flush_period_in_ms = 3600000\r\n\tAND min_index_interval = 128\r\n\tAND read_" +
            "repair_chance = 0.0\r\n\tAND speculative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE " +
            "system.size_estimates (\r\n    keyspace_name text,\r\n    table_name text,\r\n    rang" +
            "e_start text,\r\n    range_end text,\r\n    mean_partition_size bigint,\r\n    partiti" +
            "ons_count bigint,\r\n    PRIMARY KEY (keyspace_name, table_name, range_start, rang" +
            "e_end)\r\n) WITH CLUSTERING ORDER BY (table_name ASC, range_start ASC, range_end A" +
            "SC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"r" +
            "ows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'per-table primary range size est" +
            "imates\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.Size" +
            "TieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.a" +
            "pache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance " +
            "= 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND m" +
            "ax_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND" +
            " min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative" +
            "_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.compaction_history (\r\n    id u" +
            "uid PRIMARY KEY,\r\n    bytes_in bigint,\r\n    bytes_out bigint,\r\n    columnfamily_" +
            "name text,\r\n    compacted_at timestamp,\r\n    keyspace_name text,\r\n    rows_merge" +
            "d map<int, bigint>\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"k" +
            "eys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'show all compactio" +
            "n history\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.S" +
            "izeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'or" +
            "g.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chan" +
            "ce = 0.0\r\n    AND default_time_to_live = 604800\r\n    AND gc_grace_seconds = 0\r\n " +
            "   AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r" +
            "\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND spe" +
            "culative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.compactions_in_progres" +
            "s (\r\n    id uuid PRIMARY KEY,\r\n    columnfamily_name text,\r\n    inputs set<int>," +
            "\r\n    keyspace_name text\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching " +
            "= \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'unfinished c" +
            "ompactions\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction." +
            "SizeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'o" +
            "rg.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_cha" +
            "nce = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    A" +
            "ND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n   " +
            " AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND specula" +
            "tive_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE system.schema_columnfamilies (\r\n " +
            "   keyspace_name text,\r\n    columnfamily_name text,\r\n    bloom_filter_fp_chance " +
            "double,\r\n    caching text,\r\n    cf_id uuid,\r\n    column_aliases text,\r\n    comme" +
            "nt text,\r\n    compaction_strategy_class text,\r\n    compaction_strategy_options t" +
            "ext,\r\n    comparator text,\r\n    compression_parameters text,\r\n    default_time_t" +
            "o_live int,\r\n    default_validator text,\r\n    dropped_columns map<text, bigint>," +
            "\r\n    gc_grace_seconds int,\r\n    index_interval int,\r\n    is_dense boolean,\r\n   " +
            " key_aliases text,\r\n    key_validator text,\r\n    local_read_repair_chance double" +
            ",\r\n    max_compaction_threshold int,\r\n    max_index_interval int,\r\n    memtable_" +
            "flush_period_in_ms int,\r\n    min_compaction_threshold int,\r\n    min_index_interv" +
            "al int,\r\n    read_repair_chance double,\r\n    speculative_retry text,\r\n    subcom" +
            "parator text,\r\n    type text,\r\n    value_alias text,\r\n    PRIMARY KEY (keyspace_" +
            "name, columnfamily_name)\r\n) WITH CLUSTERING ORDER BY (columnfamily_name ASC)\r\n  " +
            "  AND bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per" +
            "_partition\":\"NONE\"}\'\r\n    AND comment = \'ColumnFamily definitions\'\r\n    AND comp" +
            "action = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrat" +
            "egy\'}\r\n    AND compression = {\'sstable_compression\': \'org.apache.cassandra.io.co" +
            "mpress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND defaul" +
            "t_time_to_live = 0\r\n    AND gc_grace_seconds = 604800\r\n    AND max_index_interva" +
            "l = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_inter" +
            "val = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0PE" +
            "RCENTILE\';\r\n\r\nCREATE TABLE system.local (\r\n    key text PRIMARY KEY,\r\n    bootst" +
            "rapped text,\r\n    broadcast_address inet,\r\n    cluster_name text,\r\n    cql_versi" +
            "on text,\r\n    data_center text,\r\n    dse_version text,\r\n    gossip_generation in" +
            "t,\r\n    host_id uuid,\r\n    listen_address inet,\r\n    native_protocol_version tex" +
            "t,\r\n    partitioner text,\r\n    rack text,\r\n    release_version text,\r\n    rpc_ad" +
            "dress inet,\r\n    schema_version uuid,\r\n    thrift_version text,\r\n    tokens set<" +
            "text>,\r\n    truncated_at map<uuid, blob>,\r\n    workload text\r\n) WITH bloom_filte" +
            "r_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE" +
            "\"}\'\r\n    AND comment = \'information about the local node\'\r\n    AND compaction = " +
            "{\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'}\r\n  " +
            "  AND compression = {\'sstable_compression\': \'org.apache.cassandra.io.compress.LZ" +
            "4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to" +
            "_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_interval = 2048\r\n    " +
            "AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n   " +
            " AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99.0PERCENTILE\';\r\n\r\n" +
            "CREATE TABLE system.hints (\r\n    target_id uuid,\r\n    hint_id timeuuid,\r\n    mes" +
            "sage_version int,\r\n    mutation blob,\r\n    PRIMARY KEY (target_id, hint_id, mess" +
            "age_version)\r\n) WITH COMPACT STORAGE\r\n    AND CLUSTERING ORDER BY (hint_id ASC, " +
            "message_version ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = \'" +
            "{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = \'hints awaiting " +
            "delivery\'\r\n    AND compaction = {\'enabled\': \'false\', \'class\': \'org.apache.cassan" +
            "dra.db.compaction.SizeTieredCompactionStrategy\'}\r\n    AND compression = {\'sstabl" +
            "e_compression\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dcloc" +
            "al_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_" +
            "seconds = 0\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in" +
            "_ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0." +
            "0\r\n    AND speculative_retry = \'99.0PERCENTILE\';\r\n\r\n\r\n\r\nCREATE KEYSPACE dse_leas" +
            "es WITH replication = {\'class\': \'EverywhereStrategy\'} AND durable_writes = true " +
            "AND PreLoaded = true;\r\n\r\nCREATE TABLE dse_leases.leases (\r\n    name text,\r\n    d" +
            "c text,\r\n    duration_ms int,\r\n    epoch bigint,\r\n    holder inet,\r\n    PRIMARY " +
            "KEY ((name, dc))\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys" +
            "\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'DSE Lease coordinati" +
            "on\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTier" +
            "edCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND com" +
            "pression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compre" +
            "ss.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_" +
            "chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n  " +
            "  AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n" +
            "    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND spec" +
            "ulative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE dse_leases.logs (\r\n    name text" +
            ",\r\n    dc text,\r\n    monitor inet,\r\n    at timestamp,\r\n    new_holder inet,\r\n   " +
            " old_holder inet,\r\n    PRIMARY KEY ((name, dc), monitor, at)\r\n) WITH CLUSTERING " +
            "ORDER BY (monitor ASC, at ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND c" +
            "aching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'DSE L" +
            "ease history\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compactio" +
            "n.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n " +
            "   AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra" +
            ".io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_re" +
            "ad_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_secon" +
            "ds = 0\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms =" +
            " 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n  " +
            "  AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE KEYSPACE system_distributed " +
            "WITH replication = {\'class\': \'EverywhereStrategy\'} AND durable_writes = true AND" +
            " PreLoaded = true;\r\n\r\nCREATE TABLE system_distributed.repair_history (\r\n    keys" +
            "pace_name text,\r\n    columnfamily_name text,\r\n    id timeuuid,\r\n    coordinator " +
            "inet,\r\n    exception_message text,\r\n    exception_stacktrace text,\r\n    finished" +
            "_at timestamp,\r\n    parent_id timeuuid,\r\n    participants set<inet>,\r\n    range_" +
            "begin text,\r\n    range_end text,\r\n    started_at timestamp,\r\n    status text,\r\n " +
            "   PRIMARY KEY ((keyspace_name, columnfamily_name), id)\r\n) WITH CLUSTERING ORDER" +
            " BY (id ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': " +
            "\'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'Repair history\'\r\n    AN" +
            "D compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactio" +
            "nStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND compression = " +
            "{\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compress.LZ4Compr" +
            "essor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_chance = 0." +
            "0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_i" +
            "ndex_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min" +
            "_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_ret" +
            "ry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_distributed.parent_repair_history (\r" +
            "\n    parent_id timeuuid PRIMARY KEY,\r\n    columnfamily_names set<text>,\r\n    exc" +
            "eption_message text,\r\n    exception_stacktrace text,\r\n    finished_at timestamp," +
            "\r\n    keyspace_name text,\r\n    requested_ranges set<text>,\r\n    started_at times" +
            "tamp,\r\n    successful_ranges set<text>\r\n) WITH bloom_filter_fp_chance = 0.01\r\n  " +
            "  AND caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment =" +
            " \'Repair history\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compa" +
            "ction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'" +
            "}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassa" +
            "ndra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dcloca" +
            "l_read_repair_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_s" +
            "econds = 0\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_" +
            "ms = 3600000\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0" +
            "\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE KEYSPACE system_traces W" +
            "ITH replication = {\'class\': \'EverywhereStrategy\'} AND durable_writes = true AND " +
            "PreLoaded = true;\r\n\r\nCREATE TABLE system_traces.events (\r\n    session_id uuid,\r\n" +
            "    event_id timeuuid,\r\n    activity text,\r\n    source inet,\r\n    source_elapsed" +
            " int,\r\n    thread text,\r\n    PRIMARY KEY (session_id, event_id)\r\n) WITH CLUSTERI" +
            "NG ORDER BY (event_id ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND cachi" +
            "ng = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'tracing e" +
            "vents\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeT" +
            "ieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND " +
            "compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.com" +
            "press.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repa" +
            "ir_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r" +
            "\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 360000" +
            "0\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND s" +
            "peculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE TABLE system_traces.sessions (\r\n   " +
            " session_id uuid PRIMARY KEY,\r\n    client inet,\r\n    command text,\r\n    coordina" +
            "tor inet,\r\n    duration int,\r\n    parameters map<text, text>,\r\n    request text," +
            "\r\n    started_at timestamp\r\n) WITH bloom_filter_fp_chance = 0.01\r\n    AND cachin" +
            "g = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'tracing se" +
            "ssions\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.Size" +
            "TieredCompactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND" +
            " compression = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.co" +
            "mpress.LZ4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_rep" +
            "air_chance = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0" +
            "\r\n    AND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 36000" +
            "00\r\n    AND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND " +
            "speculative_retry = \'99PERCENTILE\';\r\n\r\nCREATE KEYSPACE dse_perf WITH replication" +
            " = {\'class\': \'EverywhereStrategy\'} AND durable_writes = true AND PreLoaded = tru" +
            "e;\r\n\r\nCREATE TABLE dse_perf.node_slow_log (\r\n    node_ip inet,\r\n    date timesta" +
            "mp,\r\n    start_time timeuuid,\r\n    commands list<text>,\r\n    duration bigint,\r\n " +
            "   parameters map<text, text>,\r\n    source_ip inet,\r\n    table_names set<text>,\r" +
            "\n    username text,\r\n    PRIMARY KEY ((node_ip, date), start_time)\r\n) WITH CLUST" +
            "ERING ORDER BY (start_time DESC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND" +
            " caching = {\'keys\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'\'\r\n" +
            "    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCom" +
            "pactionStrategy\', \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND compress" +
            "ion = {\'chunk_length_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compress.LZ" +
            "4Compressor\'}\r\n    AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_chanc" +
            "e = 0.0\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND" +
            " max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    A" +
            "ND min_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculati" +
            "ve_retry = \'99PERCENTILE\';\r\n\r\nCREATE KEYSPACE dse_system WITH replication = {\'cl" +
            "ass\': \'EverywhereStrategy\'}  AND durable_writes = true AND PreLoaded = true;\r\n\r\n" +
            "CREATE TABLE dse_system.encrypted_keys (\r\n    key_file text,\r\n    cipher text,\r\n" +
            "    strength int,\r\n    key_id timeuuid,\r\n    key text,\r\n    PRIMARY KEY (key_fil" +
            "e, cipher, strength, key_id)\r\n) WITH CLUSTERING ORDER BY (cipher ASC, strength A" +
            "SC, key_id ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys" +
            "\': \'ALL\', \'rows_per_partition\': \'NONE\'}\r\n    AND comment = \'\'\r\n    AND compactio" +
            "n = {\'class\': \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\'," +
            " \'max_threshold\': \'32\', \'min_threshold\': \'4\'}\r\n    AND compression = {\'chunk_len" +
            "gth_in_kb\': \'64\', \'class\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n  " +
            "  AND crc_check_chance = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND " +
            "default_time_to_live = 0\r\n    AND gc_grace_seconds = 0\r\n    AND max_index_interv" +
            "al = 2048\r\n    AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_inte" +
            "rval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99PER" +
            "CENTILE\';\r\n\r\nCREATE TABLE dse_system.leases (\r\n    lease_id text PRIMARY KEY,\r\n " +
            "   duration int,\r\n    generation bigint,\r\n    owner uuid,\r\n    ts timestamp\r\n) W" +
            "ITH bloom_filter_fp_chance = 0.01\r\n    AND caching = {\'keys\': \'ALL\', \'rows_per_p" +
            "artition\': \'NONE\'}\r\n    AND comment = \'\'\r\n    AND compaction = {\'class\': \'org.ap" +
            "ache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\': \'32" +
            "\', \'min_threshold\': \'4\'}\r\n    AND compression = {\'chunk_length_in_kb\': \'64\', \'cl" +
            "ass\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND crc_check_chanc" +
            "e = 1.0\r\n    AND dclocal_read_repair_chance = 0.0\r\n    AND default_time_to_live " +
            "= 0\r\n    AND gc_grace_seconds = 1209600\r\n    AND max_index_interval = 2048\r\n    " +
            "AND memtable_flush_period_in_ms = 3600000\r\n    AND min_index_interval = 128\r\n   " +
            " AND read_repair_chance = 0.0\r\n    AND speculative_retry = \'99PERCENTILE\';\r\n    " +
            "\r\nCREATE TABLE dse_system.spark_1_5_master_recovery (\r\n    dc text,\r\n    id text" +
            ",\r\n    data blob,\r\n    PRIMARY KEY (dc, id)\r\n) WITH read_repair_chance = 0.0\r\n  " +
            " AND dclocal_read_repair_chance = 0.0\r\n   AND gc_grace_seconds = 1209600\r\n   AND" +
            " bloom_filter_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_par" +
            "tition\' : \'NONE\' }\r\n   AND comment = \'\'\r\n   AND compaction = { \'class\' : \'org.ap" +
            "ache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\' : 32" +
            ", \'min_threshold\' : 4 }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'clas" +
            "s\' : \'org.apache.cassandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_" +
            "live = 0\r\n   AND speculative_retry = \'99PERCENTILE\'\r\n   AND min_index_interval =" +
            " 128\r\n   AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE" +
            " TABLE dse_system.spark_1_3_master_recovery (\r\n    dc text,\r\n    id text,\r\n    d" +
            "ata blob,\r\n    PRIMARY KEY (dc, id)\r\n) WITH CLUSTERING ORDER BY (id ASC)\r\n    AN" +
            "D bloom_filter_fp_chance = 0.01\r\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_par" +
            "tition\":\"NONE\"}\'\r\n    AND comment = \'\'\r\n    AND compaction = {\'class\': \'org.apac" +
            "he.cassandra.db.compaction.SizeTieredCompactionStrategy\'}\r\n    AND compression =" +
            " {\'sstable_compression\': \'org.apache.cassandra.io.compress.LZ4Compressor\'}\r\n    " +
            "AND dclocal_read_repair_chance = 0.1\r\n    AND default_time_to_live = 0\r\n    AND " +
            "gc_grace_seconds = 864000\r\n    AND max_index_interval = 2048\r\n    AND memtable_f" +
            "lush_period_in_ms = 0\r\n    AND min_index_interval = 128\r\n    AND read_repair_cha" +
            "nce = 0.0\r\n    AND speculative_retry = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE dse_sys" +
            "tem.registered_leaders (\r\n    army text,\r\n    datacenter text,\r\n    candidates m" +
            "ap<text, inet>,\r\n    required text,\r\n    PRIMARY KEY (army, datacenter)\r\n) WITH " +
            "CLUSTERING ORDER BY (datacenter ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r\n   " +
            " AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND comment = " +
            "\'\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeTiere" +
            "dCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.apache" +
            ".cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance = 0.1" +
            "\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 864000\r\n    AND m" +
            "ax_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 0\r\n    AND min_i" +
            "ndex_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_retry" +
            " = \'99.0PERCENTILE\';\r\n\r\nCREATE TABLE dse_system.real_leaders (\r\n    army text,\r\n" +
            "    datacenter text,\r\n    address inet,\r\n    PRIMARY KEY (army, datacenter)\r\n) W" +
            "ITH CLUSTERING ORDER BY (datacenter ASC)\r\n    AND bloom_filter_fp_chance = 0.01\r" +
            "\n    AND caching = \'{\"keys\":\"ALL\", \"rows_per_partition\":\"NONE\"}\'\r\n    AND commen" +
            "t = \'\'\r\n    AND compaction = {\'class\': \'org.apache.cassandra.db.compaction.SizeT" +
            "ieredCompactionStrategy\'}\r\n    AND compression = {\'sstable_compression\': \'org.ap" +
            "ache.cassandra.io.compress.LZ4Compressor\'}\r\n    AND dclocal_read_repair_chance =" +
            " 0.1\r\n    AND default_time_to_live = 0\r\n    AND gc_grace_seconds = 864000\r\n    A" +
            "ND max_index_interval = 2048\r\n    AND memtable_flush_period_in_ms = 0\r\n    AND m" +
            "in_index_interval = 128\r\n    AND read_repair_chance = 0.0\r\n    AND speculative_r" +
            "etry = \'99.0PERCENTILE\';\r\n\r\nCREATE KEYSPACE \"HiveMetaStore\" WITH replication = {" +
            "\'class\': \'EverywhereStrategy\'}  AND durable_writes = true AND PreLoaded = true;\r" +
            "\n\r\nCREATE TABLE \"HiveMetaStore\".\"MetaStore\" (\r\n    key text,\r\n    entity text,\r\n" +
            "    value blob,\r\n    PRIMARY KEY (key, entity)\r\n) WITH COMPACT STORAGE\r\n   AND r" +
            "ead_repair_chance = 0.0\r\n   AND dclocal_read_repair_chance = 0.0\r\n   AND gc_grac" +
            "e_seconds = 1209600\r\n   AND bloom_filter_fp_chance = 0.01\r\n   AND caching = { \'k" +
            "eys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   AND comment = \'\'\r\n   AND compa" +
            "ction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTieredCompactionStra" +
            "tegy\', \'max_threshold\' : 32, \'min_threshold\' : 4 }\r\n   AND compression = { \'chun" +
            "k_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4Compressor\'" +
            " }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry = \'99PERCENTILE\'\r\n" +
            "   AND min_index_interval = 128\r\n   AND max_index_interval = 2048\r\n   AND crc_ch" +
            "eck_chance = 1.0;\r\n\r\nCREATE TABLE \"HiveMetaStore\".sparkmetastore (\r\n    key text" +
            ",\r\n    entity text,\r\n    value blob,\r\n    PRIMARY KEY (key, entity)\r\n) WITH COMP" +
            "ACT STORAGE\r\n   AND read_repair_chance = 0.0\r\n   AND dclocal_read_repair_chance " +
            "= 0.0\r\n   AND gc_grace_seconds = 1209600\r\n   AND bloom_filter_fp_chance = 0.01\r\n" +
            "   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   AND comme" +
            "nt = \'\'\r\n   AND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.Siz" +
            "eTieredCompactionStrategy\', \'max_threshold\' : 32, \'min_threshold\' : 4 }\r\n   AND " +
            "compression = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.co" +
            "mpress.LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_ret" +
            "ry = \'99PERCENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval " +
            "= 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE KEYSPACE cfs_archive WITH repli" +
            "cation = {\'class\': \'EverywhereStrategy\'}  AND durable_writes = true AND PreLoade" +
            "d = true;\r\n\r\nCREATE TABLE cfs_archive.inode (\r\n    key blob,\r\n    \"b@706172656e7" +
            "45f70617468\" blob,\r\n    \"b@70617468\" blob,\r\n    \"b@73656e74696e656c\" blob,\r\n    " +
            "PRIMARY KEY (key)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.0\r\n   A" +
            "ND dclocal_read_repair_chance = 0.1\r\n   AND gc_grace_seconds = 864000\r\n   AND bl" +
            "oom_filter_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partit" +
            "ion\' : \'NONE\' }\r\n   AND comment = \'Stores file meta data\'\r\n   AND compaction = {" +
            " \'class\' : \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'m" +
            "ax_threshold\' : 32, \'min_threshold\' : 4 }\r\n   AND compression = { \'chunk_length_" +
            "in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4Compressor\' }\r\n   AN" +
            "D default_time_to_live = 0\r\n   AND speculative_retry = \'NONE\'\r\n   AND min_index_" +
            "interval = 128\r\n   AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;" +
            "\r\nCREATE INDEX cfs_archive_parent_path ON cfs_archive.inode (\"b@706172656e745f70" +
            "617468\");\r\nCREATE INDEX cfs_archive_path ON cfs_archive.inode (\"b@70617468\");\r\nC" +
            "REATE INDEX cfs_archive_sentinel ON cfs_archive.inode (\"b@73656e74696e656c\");\r\n\r" +
            "\nCREATE TABLE cfs_archive.sblocks (\r\n    key blob,\r\n    column1 blob,\r\n    value" +
            " blob,\r\n    PRIMARY KEY (key, column1)\r\n) WITH COMPACT STORAGE\r\n   AND read_repa" +
            "ir_chance = 0.0\r\n   AND dclocal_read_repair_chance = 0.1\r\n   AND gc_grace_second" +
            "s = 864000\r\n   AND bloom_filter_fp_chance = 6.8E-5\r\n   AND caching = { \'keys\' : " +
            "\'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   AND comment = \'Stores blocks of infor" +
            "mation associated with a inode\'\r\n   AND compaction = { \'class\' : \'com.datastax.b" +
            "dp.hadoop.cfs.compaction.CFSCompactionStrategy\', \'max_threshold\' : 64, \'min_thre" +
            "shold\' : 2 }\r\n   AND compression = { \'enabled\' : \'false\' }\r\n   AND default_time_" +
            "to_live = 0\r\n   AND speculative_retry = \'NONE\'\r\n   AND min_index_interval = 128\r" +
            "\n   AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABL" +
            "E cfs_archive.cleanup (\r\n    key blob,\r\n    column1 blob,\r\n    value blob,\r\n    " +
            "PRIMARY KEY (key, column1)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = " +
            "0.0\r\n   AND dclocal_read_repair_chance = 0.1\r\n   AND gc_grace_seconds = 864000\r\n" +
            "   AND bloom_filter_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_p" +
            "er_partition\' : \'NONE\' }\r\n   AND comment = \'Stores blocks row key to perform a c" +
            "leanup for when jobs fail\'\r\n   AND compaction = { \'class\' : \'org.apache.cassandr" +
            "a.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\' : 32, \'min_thresh" +
            "old\' : 4 }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apa" +
            "che.cassandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r\n   " +
            "AND speculative_retry = \'NONE\'\r\n   AND min_index_interval = 128\r\n   AND max_inde" +
            "x_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE cfs_archive.ru" +
            "les (\r\n    key text,\r\n    compression boolean,\r\n    priority int,\r\n    PRIMARY K" +
            "EY (key)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.0\r\n   AND dcloca" +
            "l_read_repair_chance = 0.1\r\n   AND gc_grace_seconds = 864000\r\n   AND bloom_filte" +
            "r_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'N" +
            "ONE\' }\r\n   AND comment = \'Stores properties associated with groups of files and " +
            "directories selected by path patterns\'\r\n   AND compaction = { \'class\' : \'org.apa" +
            "che.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\' : 32," +
            " \'min_threshold\' : 4 }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'class" +
            "\' : \'org.apache.cassandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_l" +
            "ive = 0\r\n   AND speculative_retry = \'NONE\'\r\n   AND min_index_interval = 128\r\n   " +
            "AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n    \r\nCREATE KEYS" +
            "PACE \"OpsCenter\" WITH replication = {\'class\': \'EverywhereStrategy\'}  AND durable" +
            "_writes = true AND PreLoaded = true;\r\n\r\nCREATE TABLE \"OpsCenter\".bestpractice_re" +
            "sults (\r\n    key text,\r\n    column1 varint,\r\n    value blob,\r\n    PRIMARY KEY (k" +
            "ey, column1)\r\n) WITH COMPACT STORAGE\r\n   AND CLUSTERING ORDER BY (column1 DESC)\r" +
            "\n   AND read_repair_chance = 0.25\r\n   AND dclocal_read_repair_chance = 0.1\r\n   A" +
            "ND gc_grace_seconds = 0\r\n   AND bloom_filter_fp_chance = 0.01\r\n   AND caching = " +
            "{ \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   AND comment = \'{\"version\":" +
            " [6, 1, 4], \"info\": \"OpsCenter management data.\"}\'\r\n   AND compaction = { \'class" +
            "\' : \'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_thre" +
            "shold\' : 32, \'min_threshold\' : 4 }\r\n   AND compression = { \'chunk_length_in_kb\' " +
            ": 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4Compressor\' }\r\n   AND defau" +
            "lt_time_to_live = 0\r\n   AND speculative_retry = \'99PERCENTILE\'\r\n   AND min_index" +
            "_interval = 128\r\n   AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0" +
            ";\r\n\r\nCREATE TABLE \"OpsCenter\".rollup_state (\r\n    node text,\r\n    name text,\r\n  " +
            "  res int,\r\n    avg float,\r\n    histogram blob,\r\n    max float,\r\n    min float,\r" +
            "\n    ts timestamp,\r\n    type int,\r\n    value float,\r\n    weight float,\r\n    PRIM" +
            "ARY KEY (node, name, res)\r\n) WITH read_repair_chance = 0.0\r\n   AND dclocal_read_" +
            "repair_chance = 0.0\r\n   AND gc_grace_seconds = 0\r\n   AND bloom_filter_fp_chance " +
            "= 0.1\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   AN" +
            "D comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data.\"}\'\r\n   A" +
            "ND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.LeveledCompactio" +
            "nStrategy\' }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.a" +
            "pache.cassandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r\n " +
            "  AND speculative_retry = \'99PERCENTILE\'\r\n   AND min_index_interval = 128\r\n   AN" +
            "D max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"Ops" +
            "Center\".settings (\r\n    key blob,\r\n    column1 blob,\r\n    value blob,\r\n    PRIMA" +
            "RY KEY (key, column1)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = 1.0\r\n" +
            "   AND dclocal_read_repair_chance = 0.1\r\n   AND gc_grace_seconds = 864000\r\n   AN" +
            "D bloom_filter_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_pa" +
            "rtition\' : \'NONE\' }\r\n   AND comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter" +
            " management data.\"}\'\r\n   AND compaction = { \'class\' : \'org.apache.cassandra.db.c" +
            "ompaction.SizeTieredCompactionStrategy\', \'max_threshold\' : 12, \'min_threshold\' :" +
            " 8 }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.ca" +
            "ssandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r\n   AND sp" +
            "eculative_retry = \'99PERCENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_in" +
            "dex_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\"." +
            "pdps (\r\n    key text,\r\n    column1 text,\r\n    value blob,\r\n    PRIMARY KEY (key," +
            " column1)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.25\r\n   AND dclo" +
            "cal_read_repair_chance = 0.1\r\n   AND gc_grace_seconds = 0\r\n   AND bloom_filter_f" +
            "p_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE" +
            "\' }\r\n   AND comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data" +
            ".\"}\'\r\n   AND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTi" +
            "eredCompactionStrategy\', \'max_threshold\' : 32, \'min_threshold\' : 4 }\r\n   AND com" +
            "pression = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compr" +
            "ess.LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry " +
            "= \'99PERCENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval = 2" +
            "048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\".rollups7200 (\r\n " +
            "   key text,\r\n    timestamp varint,\r\n    value blob,\r\n    PRIMARY KEY (key, time" +
            "stamp)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.25\r\n   AND dclocal" +
            "_read_repair_chance = 0.1\r\n   AND gc_grace_seconds = 0\r\n   AND bloom_filter_fp_c" +
            "hance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }" +
            "\r\n   AND comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data.\"}" +
            "\'\r\n   AND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTiere" +
            "dCompactionStrategy\', \'max_threshold\' : 8, \'min_threshold\' : 2 }\r\n   AND compres" +
            "sion = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress." +
            "LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry = \'9" +
            "9PERCENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval = 2048\r" +
            "\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\".rollups86400 (\r\n    " +
            "key text,\r\n    timestamp varint,\r\n    value blob,\r\n    PRIMARY KEY (key, timesta" +
            "mp)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.25\r\n   AND dclocal_re" +
            "ad_repair_chance = 0.1\r\n   AND gc_grace_seconds = 0\r\n   AND bloom_filter_fp_chan" +
            "ce = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n " +
            "  AND comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data.\"}\'\r\n" +
            "   AND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTieredCo" +
            "mpactionStrategy\', \'max_threshold\' : 8, \'min_threshold\' : 2 }\r\n   AND compressio" +
            "n = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4" +
            "Compressor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry = \'99PE" +
            "RCENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval = 2048\r\n  " +
            " AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\".backup_reports (\r\n    w" +
            "eek text,\r\n    event_time timestamp,\r\n    backup_id text,\r\n    type text,\r\n    d" +
            "estination text,\r\n    deleted_at timestamp,\r\n    full_status text,\r\n    \"keyspac" +
            "es\" text,\r\n    status text,\r\n    PRIMARY KEY (week, event_time, backup_id, type," +
            " destination)\r\n) WITH CLUSTERING ORDER BY (event_time DESC, backup_id ASC, type " +
            "ASC, destination ASC)\r\n   AND read_repair_chance = 0.0\r\n   AND dclocal_read_repa" +
            "ir_chance = 0.1\r\n   AND gc_grace_seconds = 864000\r\n   AND bloom_filter_fp_chance" +
            " = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   " +
            "AND comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data.\"}\'\r\n  " +
            " AND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTieredComp" +
            "actionStrategy\', \'max_threshold\' : 32, \'min_threshold\' : 4 }\r\n   AND compression" +
            " = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4C" +
            "ompressor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry = \'99PER" +
            "CENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval = 2048\r\n   " +
            "AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\".events_timeline (\r\n    k" +
            "ey text,\r\n    column1 bigint,\r\n    value blob,\r\n    PRIMARY KEY (key, column1)\r\n" +
            ") WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.25\r\n   AND dclocal_read_re" +
            "pair_chance = 0.1\r\n   AND gc_grace_seconds = 864000\r\n   AND bloom_filter_fp_chan" +
            "ce = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n " +
            "  AND comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data.\"}\'\r\n" +
            "   AND compaction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTieredCo" +
            "mpactionStrategy\', \'max_threshold\' : 8, \'min_threshold\' : 4 }\r\n   AND compressio" +
            "n = { \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4" +
            "Compressor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry = \'99PE" +
            "RCENTILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval = 2048\r\n  " +
            " AND crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\".rollups60 (\r\n    key te" +
            "xt,\r\n    timestamp varint,\r\n    value blob,\r\n    PRIMARY KEY (key, timestamp)\r\n)" +
            " WITH COMPACT STORAGE\r\n   AND read_repair_chance = 0.25\r\n   AND dclocal_read_rep" +
            "air_chance = 0.1\r\n   AND gc_grace_seconds = 0\r\n   AND bloom_filter_fp_chance = 0" +
            ".01\r\n   AND caching = { \'keys\' : \'ALL\', \'rows_per_partition\' : \'NONE\' }\r\n   AND " +
            "comment = \'{\"version\": [6, 1, 4], \"info\": \"OpsCenter management data.\"}\'\r\n   AND" +
            " compaction = { \'class\' : \'org.apache.cassandra.db.compaction.SizeTieredCompacti" +
            "onStrategy\', \'max_threshold\' : 32, \'min_threshold\' : 4 }\r\n   AND compression = {" +
            " \'chunk_length_in_kb\' : 64, \'class\' : \'org.apache.cassandra.io.compress.LZ4Compr" +
            "essor\' }\r\n   AND default_time_to_live = 0\r\n   AND speculative_retry = \'99PERCENT" +
            "ILE\'\r\n   AND min_index_interval = 128\r\n   AND max_index_interval = 2048\r\n   AND " +
            "crc_check_chance = 1.0;\r\n\r\nCREATE TABLE \"OpsCenter\".events (\r\n    key text,\r\n   " +
            " action bigint,\r\n    api_source_ip text,\r\n    column_family text,\r\n    event_sou" +
            "rce text,\r\n    \"keyspace\" text,\r\n    level bigint,\r\n    message text,\r\n    sourc" +
            "e_node text,\r\n    success boolean,\r\n    target_node text,\r\n    time bigint,\r\n   " +
            " user text,\r\n    PRIMARY KEY (key)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_c" +
            "hance = 0.25\r\n   AND dclocal_read_repair_chance = 0.1\r\n   AND gc_grace_seconds =" +
            " 864000\r\n   AND bloom_filter_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\'" +
            ", \'rows_per_partition\' : \'NONE\' }\r\n   AND comment = \'{\"version\": [6, 1, 4], \"inf" +
            "o\": \"OpsCenter management data.\"}\'\r\n   AND compaction = { \'class\' : \'org.apache." +
            "cassandra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\' : 12, \'mi" +
            "n_threshold\' : 8 }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'class\' : " +
            "\'org.apache.cassandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_live " +
            "= 0\r\n   AND speculative_retry = \'99PERCENTILE\'\r\n   AND min_index_interval = 128\r" +
            "\n   AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;\r\n\r\nCREATE TABL" +
            "E \"OpsCenter\".rollups300 (\r\n    key text,\r\n    timestamp varint,\r\n    value blob" +
            ",\r\n    PRIMARY KEY (key, timestamp)\r\n) WITH COMPACT STORAGE\r\n   AND read_repair_" +
            "chance = 0.25\r\n   AND dclocal_read_repair_chance = 0.1\r\n   AND gc_grace_seconds " +
            "= 0\r\n   AND bloom_filter_fp_chance = 0.01\r\n   AND caching = { \'keys\' : \'ALL\', \'r" +
            "ows_per_partition\' : \'NONE\' }\r\n   AND comment = \'{\"version\": [6, 1, 4], \"info\": " +
            "\"OpsCenter management data.\"}\'\r\n   AND compaction = { \'class\' : \'org.apache.cass" +
            "andra.db.compaction.SizeTieredCompactionStrategy\', \'max_threshold\' : 16, \'min_th" +
            "reshold\' : 4 }\r\n   AND compression = { \'chunk_length_in_kb\' : 64, \'class\' : \'org" +
            ".apache.cassandra.io.compress.LZ4Compressor\' }\r\n   AND default_time_to_live = 0\r" +
            "\n   AND speculative_retry = \'99PERCENTILE\'\r\n   AND min_index_interval = 128\r\n   " +
            "AND max_index_interval = 2048\r\n   AND crc_check_chance = 1.0;")]
        public string DSESystemDDL {
            get {
                return ((string)(this["DSESystemDDL"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Local write count")]
        public string CFStatsDetectWriteActivityAttr {
            get {
                return ((string)(this["CFStatsDetectWriteActivityAttr"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Local read count")]
        public string CFStatsDetectReadActivityAttr {
            get {
                return ((string)(this["CFStatsDetectReadActivityAttr"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>.extracted</string>\r\n  <string>.ignore</string>\r\n</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection IgnoreFileWExtensions {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["IgnoreFileWExtensions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool DetectDuplicatedLogEvents {
            get {
                return ((bool)(this["DetectDuplicatedLogEvents"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"(?:/(?(?=[a-z0-9. ]+/)(?<PATH>[^  \]}),]+)|(?<NODE>[^  \]}),]+)))|(?:consistency\s+level\s+(?<consistencylevel>[a-z\-_]+))|(?:timeout\:?\s+(?<timeout>[0-9,.\-]+))|(?:sstable\s*(?<SSTABLEPATH>[a-z0-9\-_@#/.,\\ +%]+)[\]})]?)|(?:executing\s+query\s+(?<cql>.+)|(?:(?:\s+|\#)(?<ID>[0-9a-f]{8}\-[0-9a-f]{4}\-[0-9a-f]{4}\-[0-9a-f]{4}\-[0-9a-f]{12})(?:\s|\]))|(?:\s?(?<TOKENRANGE>\(\-?[0-9]+\,\-?[0-9]+\])\,?)|(?:id\:\s+(?<CHANNELID>0x[0-9a-f]+)))")]
        public string LogExceptionRegExMatches {
            get {
                return ((string)(this["LogExceptionRegExMatches"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Warning, Error, Fatal, Exception")]
        public string DefaultLogLevelHandling {
            get {
                return ((string)(this["DefaultLogLevelHandling"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("solr index storage size")]
        public string SolrIndexStorageSizeStatAttribute {
            get {
                return ((string)(this["SolrIndexStorageSizeStatAttribute"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"[
{""Key"":""ID"",""Value"":""[0-9a-f\\-]+""},
{""Key"":""DURATION"",""Value"":""[0-9,.]+""},
{""Key"":""DURATIONwUOM"",""Value"":""(?<DURATION>[0-9,.]+\\s*\\w+)""},
{""Key"":""KEYSPACE"",""Value"":""[a-z0-9'\\-_$%+=!?<>^*&@]+""},
{""Key"":""DDLITEMNAME"",""Value"":""[a-z0-9'\\-_$%+=!?<>^*&@/.]+""},
{""Key"":""DDLITEMNAMES"",""Value"":""[a-z0-9'\\-_$%+=!?<>^*&@/. ,]*""},
{""Key"":""TABLEVIEWNAME"",""Value"":""[a-z0-9'\\-_$%+=!?<>^*&@/.]+""},
{""Key"":""DDLITEM"",""Value"":""[^ ]+""},
{""Key"":""DDLSCHEMAID"",""Value"":""[0-9a-f\\-]+""},
{""Key"":""SSTABLEPATH"",""Value"":""[a-z0-9\\-_@#/.\\ +%]+""},
{""Key"":""SSTABLEPATHS"",""Value"":""[a-z0-9\\-_@#/.,\\ +%]*""},
{""Key"":""NODE"",""Value"":""[^ ]+""},
{""Key"":""SOLRINDEXNAME"",""Value"":""[a-z0-9'\\-_$%+=!?<>^*&@/.]+""},
{""Key"":""CQLSELECT"",""Value"":""select\\s+(?<querycols>.+)\\s+from\\s+(?<TABLEVIEWNAME>[a-z0-9'\\-_$%+=!?<>^*&@/.]+)(?:\\s+where\\s+(?<whereclause>.+?))??(?:\\s+order\\s+by\\s+(?<orderbycols>.+?))??(?:\\s+limit\\s+(?<limit>\\d+?))??(?<allowfiltering>\\s+allow\\s+filtering)??""}
]")]
        public string RegExLexiconValues {
            get {
                return ((string)(this["RegExLexiconValues"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Auto,OnlyFlushCompactionMsgs")]
        public string DebugLogProcessing {
            get {
                return ((string)(this["DebugLogProcessing"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1.*, 2.*")]
        public string DebugFlushCompCLogLineTags {
            get {
                return ((string)(this["DebugFlushCompCLogLineTags"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool LogCheckOverlappingDateRange {
            get {
                return ((bool)(this["LogCheckOverlappingDateRange"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>dse_system</string>
  <string>system_auth</string>
  <string>system_distributed</string>
  <string>system_schema</string>
  <string>system</string>
  <string>dse_security</string>
  <string>solr_admin</string>
  <string>dse_auth</string>
  <string>dse_leases</string>
  <string>system_traces</string>
  <string>dse_perf</string>
  <string>HiveMetaStore</string>
  <string>cfs_archive</string>
  <string>cfs</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection IgnoreWarningsErrosInKeySpaces {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["IgnoreWarningsErrosInKeySpaces"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\Log4NetParser.json,.\\Json\\Log4NetParser.json,[cpld]\\Json\\Log4NetParser.json,[cp" +
            "ld]\\Log4NetParser.json,[ApplicationRunTimeDirectory]\\Json\\Log4NetParser.json,[Ap" +
            "plicationRunTimeDirectory]\\Log4NetParser.json,.\\Log4NetParser.json,.\\Json\\Log4Ne" +
            "tParser.json")]
        public string MasterLog4NetParser {
            get {
                return ((string)(this["MasterLog4NetParser"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Maximum tombstones per slice (last five minutes)")]
        public string CFStatTombstonePropName {
            get {
                return ((string)(this["CFStatTombstonePropName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Maximum live cells per slice (last five minutes)")]
        public string CFStatLiveCellPropName {
            get {
                return ((string)(this["CFStatLiveCellPropName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("solr index percent storage size ")]
        public string SolrIndexStorageSizePercentStatAttribute {
            get {
                return ((string)(this["SolrIndexStorageSizePercentStatAttribute"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Space used (total)")]
        public string CFStatTotalStorage {
            get {
                return ((string)(this["CFStatTotalStorage"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Local read count")]
        public string CFStatsLocalReadCount {
            get {
                return ((string)(this["CFStatsLocalReadCount"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Local write count")]
        public string CFStatsLocalWriteCout {
            get {
                return ((string)(this["CFStatsLocalWriteCout"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SSTables in each level")]
        public string CFStatsLCSLevels {
            get {
                return ((string)(this["CFStatsLCSLevels"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Tombstone/Live Percent")]
        public string TombstoneLiveCellRatioAttrib {
            get {
                return ((string)(this["TombstoneLiveCellRatioAttrib"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Local Read Percentage")]
        public string ReadPercentAttrib {
            get {
                return ((string)(this["ReadPercentAttrib"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Local Write Percentage")]
        public string WritePercentAttrib {
            get {
                return ((string)(this["WritePercentAttrib"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LCS Level BuildUp Ratio")]
        public string LCSBackRatioAttrib {
            get {
                return ((string)(this["LCSBackRatioAttrib"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SSTables in each split level")]
        public string LCSSplitLevelsAttrib {
            get {
                return ((string)(this["LCSSplitLevelsAttrib"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LCS Nbr Split Levels")]
        public string LCSNbrSplitLevelsAttrib {
            get {
                return ((string)(this["LCSNbrSplitLevelsAttrib"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("-(?<year>\\d{1,4})-(?<month>\\d{1,2})-(?<day>\\d{1,2})-(?<hour>\\d{1,2})-(?<min>\\d{1," +
            "2})-(?<second>\\d{1,2})-(?<timezone>\\w+)")]
        public string CaptureTimeFrameRegEx {
            get {
                return ((string)(this["CaptureTimeFrameRegEx"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("(?<cluster>.+)-diagnostics-(?<year>\\d{2,4})_(?<month>\\d{1,2})_(?<day>\\d{1,2})_(?<" +
            "hour>\\d{1,2})_(?<min>\\d{1,2})_(?<second>\\d{1,2})_(?<timezone>\\w+)")]
        public string ClusterCaptureTimeFrameRegEx {
            get {
                return ((string)(this["ClusterCaptureTimeFrameRegEx"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("(?)")]
        public string UnknownDCSuffix {
            get {
                return ((string)(this["UnknownDCSuffix"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("^f(?:e|f)\\d+::\\d+$")]
        public string IgnoreIP6AddressRegEx {
            get {
                return ((string)(this["IgnoreIP6AddressRegEx"]));
            }
        }
    }
}
