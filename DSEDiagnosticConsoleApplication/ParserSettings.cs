using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Common;
using Common.Path;
using DSEDiagnosticParamsSettings;

namespace DSEDiagnosticConsoleApplication
{
    public static class ParserSettings
    {       
        #region Enums

        public enum DiagFolderStructOptions
        {
            /// <summary>
            /// OpsCenter Diagnostic Tar-Ball structure
            /// </summary>
            OpsCtrDiagStruct = 0,
            /// <summary>
            /// Each file has the Node&apos;s IP Adress (prefixed or suffix) with the Nodetool/DSETool command.
            /// Example: 10.0.0.1-cfstats, 10.0.0.1-system.log, 10.0.0.1-cassandra.yaml, etc.
            /// </summary>
            IndivFiles = 1,
            /// <summary>
            /// Each file is within a folder where the Node&apos;s IP Adress (prefixed or suffix) is within the folder name. All files within this folder
            /// are prefixed by the command (e.g., dsetool, nodetool, etc.) followed by the command&apos;s subcommand/action. Logs and configuration files are just normal.
            /// Example: 10.0.0.1Folder\nodetool.ring, 10.0.0.1Folder\nodetool.cfstats, 10.0.0.1Folder\dsetool.ring, 10.0.0.1Folder\cqlsh.describe.cql, 10.0.0.1Folder\system.log, 10.0.0.1Folder\cassandra.yaml
            /// </summary>
            NodeSubFldStruct = 2,
            /// <summary>
            /// The diagnostic file structure generated by a node's OpsCenter Agent
            /// </summary>
            NodeAgentDiagStruct = 3
        }

        #endregion

        #region Settings

        public static IDirectoryPath DiagnosticPath = Helpers.MakeDirectoryPath(Properties.Settings.Default.DiagnosticPath);
        public static IFilePath ExcelFilePath = Helpers.MakeFilePath(Properties.Settings.Default.ExcelFilePath, DiagnosticPath);
        public static DiagFolderStructOptions DiagFolderStruct = (DiagFolderStructOptions)Enum.Parse(typeof(DiagFolderStructOptions), Properties.Settings.Default.DiagFolderStruct);
        public static List<string> IgnoreKeySpaces = DSEDiagnosticLibrary.LibrarySettings.SystemKeyspaces.Append(DSEDiagnosticLibrary.LibrarySettings.DSEKeyspaces).ToList();
        public static int OnlyIncludeXHrsofLogsFromDiagCaptureTime = Properties.Settings.Default.OnlyIncludeXHrsofLogsFromDiagCaptureTime;
        public static List<KeyValuePair<string, IFilePath>> AdditionalFilesForParsingClass = new List<KeyValuePair<string, IFilePath>>();
        public static List<string> WarnWhenKSTblIsDetected
        {
            get { return DSEDiagnosticLibrary.LibrarySettings.TablesUsageFlag.ToList(); }
            set { DSEDiagnosticLibrary.LibrarySettings.TablesUsageFlag = value?.ToArray() ?? new string[0]; }
        }
        public static List<string> WhiteListKeyspaceInWS = Properties.Settings.Default.WhiteListKeyspaceInWS.ToList();
        public static IEnumerable<string> IgnoreWarningsErrosInKeySpaces
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.IgnoreWarningsErrosInKeySpaces; }
            set { DSEDiagnosticFileParser.LibrarySettings.IgnoreWarningsErrosInKeySpaces = value ?? Enumerable.Empty<string>(); }
        }
        public static IFilePath ExcelFileTemplatePath = Helpers.MakeFilePath(Properties.Settings.Default.ExcelFileTemplatePath, ExcelFilePath?.ParentDirectoryPath);
        public static TimeSpan LogAggregationPeriod
        {
            get { return DSEDiagnosticAnalytics.LibrarySettings.LogAggregationPeriod; }
            set { DSEDiagnosticAnalytics.LibrarySettings.LogAggregationPeriod = value; }
        }

        public static DateTimeOffsetRange LogRestrictedTimeRange
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.LogRestrictedTimeRange; }
            set { DSEDiagnosticFileParser.LibrarySettings.LogRestrictedTimeRange = value; }
        }
        public static DateTimeOffset? NodeToolCaptureTimestamp
        {
            get { return DSEDiagnosticLibrary.LibrarySettings.NodeToolCaptureTimestamp; }
            set { DSEDiagnosticLibrary.LibrarySettings.NodeToolCaptureTimestamp = value; }
        }
        public static string ProcessFileMappingValue
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.ProcessFileMappingValue; }
            set { DSEDiagnosticFileParser.LibrarySettings.ProcessFileMappingValue = value; }
        }
        public static bool DisableParallelProcessing
        {
            get { return DSEDiagnosticFileParser.DiagnosticFile.DisableParallelProcessing; }
            set { DSEDiagnosticFileParser.DiagnosticFile.DisableParallelProcessing = value; }
        }

        public static int LogFileInfoAnalysisGapTriggerInMins
        {
            get { return (int) DSEDiagnosticAnalytics.LibrarySettings.LogFileInfoAnalysisGapTriggerInMins; }
            set { DSEDiagnosticAnalytics.LibrarySettings.LogFileInfoAnalysisGapTriggerInMins = value; }
        }

        public static int LogFileInfoAnalysisContinousEventInDays
        {
            get { return (int)DSEDiagnosticAnalytics.LibrarySettings.LogFileInfoAnalysisContinousEventInDays; }
            set { DSEDiagnosticAnalytics.LibrarySettings.LogFileInfoAnalysisContinousEventInDays = value; }
        }

        public static bool AppendToWorkSheet
        {
            get { return DSEDiagtnosticToExcel.LibrarySettings.AppendToWorkSheet; }
            set { DSEDiagtnosticToExcel.LibrarySettings.AppendToWorkSheet = value; }
        }

        public static DSEDiagnosticFileParser.file_cassandra_log4net.DebugLogProcessingTypes DebugLogProcessing
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.DebugLogProcessing; }
            set { DSEDiagnosticFileParser.LibrarySettings.DebugLogProcessing = value; }
        }

        public static bool LoadSystemDSEKeyspaces
        {            
            get { return DSEDiagnosticFileParser.cql_ddl.LoadSystemDSEKeyspaces; }           
        }

        public static string Log4NetConversionPattern
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.Log4NetConversionPattern; }
            set { DSEDiagnosticFileParser.LibrarySettings.Log4NetConversionPattern = value; }
        }

        public static string DefaultClusterTZ
        {
            get { return DSEDiagnosticLibrary.LibrarySettings.DefaultClusterTZ; }
            set { DSEDiagnosticLibrary.LibrarySettings.DefaultClusterTZ = value; }
        }

        public static string ClusterName
        {
            get;
            set;
        }

        public static int? ClusterHashCode
        {
            get;
            set;
        }

        public static DSEDiagnosticLibrary.DefaultAssocItemToTimeZone[] DCDefaultTimeZones
        {
            get { return DSEDiagnosticLibrary.DataCenter.DefaultTimeZones; }
            set { DSEDiagnosticLibrary.DataCenter.DefaultTimeZones = value; }
        }

        public static DSEDiagnosticLibrary.DefaultAssocItemToTimeZone[] NodeDefaultTimeZones
        {
            get { return DSEDiagnosticLibrary.Node.DefaultTimeZones; }
            set { DSEDiagnosticLibrary.Node.DefaultTimeZones = value; }
        }

        public static bool LogEventsAreMemoryMapped
        {
            get { return DSEDiagnosticLibrary.LibrarySettings.LogEventsAreMemoryMapped; }
            set { DSEDiagnosticLibrary.LibrarySettings.LogEventsAreMemoryMapped = value; }
        }

        public static string Profile
        {
            get { return Profiles.CurrentProfile?.ProfileName ?? Profiles.DefaultProfileName; }            
        }

        public static DSEDiagnosticFileParser.file_cassandra_log4net.DebugLogProcessingTypes DebugLogProcessingType
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.DebugLogProcessing; }
            set { DSEDiagnosticFileParser.LibrarySettings.DebugLogProcessing = value; }
        }

        public static DSEDiagnosticFileParser.file_cassandra_log4net.DefaultLogLevelHandlers DefaultLogLevelHandling
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.DefaultLogLevelHandling; }
            set { DSEDiagnosticFileParser.LibrarySettings.DefaultLogLevelHandling = value; }
        }

        public static List<string> OnlyNodes = new List<string>();

        public static Version DSEVersion = null;

        private static List<string> _IgnoreLogParsingTagEvents = Properties.Settings.Default.IgnoreLogParsingTagEvents?.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();
        public static IEnumerable<string> IgnoreLogParsingTagEvents
        {
            get { return _IgnoreLogParsingTagEvents; }
            set
            {
                _IgnoreLogParsingTagEvents = value?.ToList();
            }
        }

        public static bool OldExcelWorksheets
        {
            get;
            set;
        }

        public static bool LogIgnoreParsingErrors
        {
            get { return DSEDiagnosticFileParser.LibrarySettings.LogIgnoreParsingErrors; }
            set { DSEDiagnosticFileParser.LibrarySettings.LogIgnoreParsingErrors = value; }
        }
        
        public static bool EnableAttrSymbols
        {
            get { return DSEDiagnosticLibrary.LibrarySettings.EnableAttrSymbols; }
            set { DSEDiagnosticLibrary.LibrarySettings.EnableAttrSymbols = value; }
        }

        private static bool batchMode = false;
        public static bool BatchMode
        {
            get { return batchMode; }
            set
            {
                batchMode = value;

                if (batchMode)
                    TraceExceptions = true;
                else
                    TraceExceptions = Properties.Settings.Default.TraceExceptions;                
            }
        }

        public static bool TraceExceptions
        {
            get;
            set;
        } = Properties.Settings.Default.TraceExceptions;

        #endregion
    }
}
